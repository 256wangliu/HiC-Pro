#!/bin/bash

## HiC-Pro           
## Copyleft 2015 Institut Curie
## Author(s): Nicolas Servant
## Contact: nicolas.servant@curie.fr
## This software is distributed without any guarantee under the terms of the GNU General
## Public License, either Version 2, June 1991 or Version 3, June 2007.
                                                                   
SOFT="HiC-Pro"
VERSION="2.5.2"

function usage {
    echo -e "usage : $SOFT -i INPUT -o OUTPUT -c CONFIG [-s ANALYSIS_STEP] [-p] [-h] [-v]"
    echo -e "Use option -h|--help for more information"
}

function help {
    usage;
    echo 
    echo "$SOFT $VERSION"
    echo "---------------"
    echo "OPTIONS"
    echo
    echo "   -i|--input INPUT : input data folder; Must contains a folder per sample with fastq (or bam) files"
    echo "   -o|--output OUTPUT : output folder"
    echo "   -c|--conf CONFIG : configuration file for Hi-C processing"
    echo "   [-p|--parallel] : if specified run $SOFT in PBS/Torque mode"
    echo "   [-s|--step ANALYSIS_STEP] : run only a subset of the $SOFT workflow; if not specified the complete workflow is run"
    echo "      mapping: perform reads alignment"
    echo "      proc_hic: perform Hi-C filtering"
    echo "      quality_checks: run Hi-C quality control plots"
    echo "      build_contact_maps: build raw inter/intrachromosomal contact maps"
    echo "      ice_norm : run ICE normalization on contact maps"
    echo "   [-h|--help]: help"
    echo "   [-v|--version]: version"
    exit;
}

function version {
    echo -e "$SOFT version $VERSION"
    exit
}

function opts_error {
    echo -e "Error : invalid parameters !" >&2
    echo -e "Use $SOFT -h for help"
    exit
}

if [ $# -lt 1 ]
then
    usage
    exit
fi

PBS=0
MAKE_OPTS=""
INPUT=""
OUTPUT=""
CONF=""
# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--input") set -- "$@" "-i" ;;
      "--output") set -- "$@" "-o" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--step")   set -- "$@" "-s" ;;
      "--parallel")   set -- "$@" "-p" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done

while getopts ":i:o:c:s:pvh" OPT
do
    case $OPT in
	i) INPUT=$OPTARG;;
	o) OUTPUT=$OPTARG;;
	c) CONF=$OPTARG;;
	s) MAKE_OPTS="$MAKE_OPTS $OPTARG";;
	p) PBS=1 ;;
	v) version ;;
	h) help ;;
	\?)
	     echo "Invalid option: -$OPTARG" >&2
	     usage
	     exit 1
	     ;;
	 :)
	     echo "Option -$OPTARG requires an argument." >&2
	     usage
	     exit 1
	     ;;
    esac
done

# set -- $(getopt -u -o c:s:i:o:pvh -l conf:,step:,input:,output:,parallel,version,help -- "$@")
# while [ $# -gt 0 ]
# do
#     case "$1" in
# 	-i|--input) INPUT=$2; shift;;
# 	-o|--output) OUTPUT=$2; shift;;
# 	-c|--conf) CONF=$2; shift;;
# 	-s|--step) MAKE_OPTS="$MAKE_OPTS $2"; shift;;
# 	-p|--parallel) PBS=1;;
# 	-v|--version) version;;
# 	-h|--help) help;;
# 	--) shift; break;;
# 	-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
# 	*)  break;;
#     esac
#     shift
# done

if [[ -z $INPUT || -z $OUTPUT || -z $CONF ]]; then
    usage
    exit
fi

## Set PATHS
BIN_PATH=`dirname $0`
ABS_BIN_PATH=`cd "$BIN_PATH"; pwd`
SCRIPTS_PATH="$ABS_BIN_PATH/../scripts/"
INSTALL_PATH="$ABS_BIN_PATH/../"
CUR_PATH=$PWD


## Read conf file                                                                                                                                                        
. $SCRIPTS_PATH/hic.inc.sh

#####################
## Check Config file
#####################

INPUT=`abspath $INPUT`
OUTPUT=`abspath $OUTPUT`

if [ ! -e $INPUT ]; then
    echo "Inputs '$INPUT' not found. Exit."
    exit -1
fi

if [[ -z $PAIR1_EXT || -z $PAIR2_EXT ]]; then
    echo "Read pairs extension is not defined. Exit"
    exit -1
fi

if [[ -z $GENOME_SIZE ]]; then
    GENOME_SIZE_FILE=`abspath $GENOME_SIZE`
    if [[ ! -e $GENOME_SIZE_FILE ]]; then
	GENOME_SIZE_FILE=$ANNOT_DIR/$GENOME_SIZE
	if [[ ! -e $GENOME_SIZE_FILE ]]; then
	    echo "$GENOME_SIZE not found. Exit"
	    exit -1
	fi
    fi
fi

if [[ -z $GENOME_FRAGMENT ]]; then
    GENOME_FRAGMENT_FILE=`abspath $GENOME_FRAGMENT`
    if [[ ! -e $GENOME_FRAGMENT_FILE ]]; then
	GENOME_FRAGMENT_FILE=$ANNOT_DIR/$GENOME_FRAGMENT
	if [[ ! -e $GENOME_FRAGMENT_FILE ]]; then
	    echo "$GENOME_FRAGMENT not found. Exit"
	    exit -1
	fi
    fi
fi



#####################
## Init HiC-Pro
####################
if [ -d $OUTPUT ]; then
    echo "$OUTPUT folder alreads exists. Do you want to delete it before running ?(y/n) [n] : "
    read ans
    if [ XX${ans} = XXy ]; then
	/bin/rm -rf $OUTPUT
    fi
fi
mkdir -p $OUTPUT
    
if [ ! -e $OUTPUT/$RAW_DIR ]; then
    ln -s $INPUT $OUTPUT/$RAW_DIR
fi

## cp config file in output
if [ ! -e $CONF ]; then
    cp $CONF $OUTPUT
fi

cd $OUTPUT

#####################
## Check step option
#####################
MAKE_OPTS=$(echo $MAKE_OPTS | sed -e 's/^ //')
AVAILABLE_STEP_ARRAY=("mapping" "proc_hic" "quality_checks" "build_contact_maps" "ice_norm")
NEED_BAM_STEP_ARRAY=("proc_hic" "build_contact_maps" "ice_norm")
NEED_FASTQ_STEP_ARRAY=("mapping")

if [[ $MAKE_OPTS != "" ]]; then
    NEED_FASTQ=0
    NEED_BAM=1

    for s in $MAKE_OPTS
    do
	check_s=0
	for i in ${AVAILABLE_STEP_ARRAY[@]}; do
	    if [[ "$i" == "$s" ]]; then check_s=1; fi
	done
	if [[ $check_s == 0 ]]; then die "Unknown step option (\"-s $s\"). Use $0 --help for usage information."; fi
	
	for i in ${NEED_FASTQ_STEP_ARRAY[@]}; do
	    if [[ "$i" == "$s" ]]; then NEED_FASTQ=1; fi
	done
    done
else
    NEED_FASTQ=1
    NEED_BAM=0
fi


#####################
## Check data structure
#####################

## Check rawdata structure
if [[ $NEED_FASTQ == 1 ]]; then
    nbin=$(find -L $INPUT -mindepth 2 -maxdepth 2 -name "*.fastq" -o -name "*.fastq.gz" | wc -l)
    if [ $nbin == 0 ]; then
	die "Error: Directory Hierarchy of rawdata '$INPUT' is not correct. No '.fastq(.gz)' files detected"
    fi
elif [[ $NEED_BAM == 1 ]]; then
    nbin=$(find -L $INPUT -mindepth 2 -maxdepth 2 -name "*.bam" | wc -l)
    nbin_r1=$(find -L $INPUT -mindepth 2 -maxdepth 2 -name "*.bam" -and -name "*${PAIR1_EXT}* | wc -l")
    nbin_r2=$(find -L $INPUT -mindepth 2 -maxdepth 2 -name "*.bam" -and -name "*${PAIR2_EXT}* | wc -l")

    if [[ $nbin == 0 || $nbin_r1 != $nbin_r2 ]]; then
	die "Error: Directory Hierarchy of rawdata '$INPUT' is not correct. Paired '.bam' files with ${PAIR1_EXT}/${PAIR2_EXT} are required for '$MAKE_OPTS' step(s)"
    fi
fi

###################
## Run HiC-Pro
###################
echo
if [ $PBS == 0 ]; then
    echo "Run HiC-Pro "${VERSION}
    make --file $SCRIPTS_PATH/Makefile CONFIG_FILE=$CONF CONFIG_SYS=$INSTALL_PATH"/config-system.txt" init 2>&1
    make --file $SCRIPTS_PATH/Makefile CONFIG_FILE=$CONF CONFIG_SYS=$INSTALL_PATH"/config-system.txt" $MAKE_OPTS 2>&1
else
    echo "Run HiC-Pro "${VERSION}" parallel mode"
    if [[ $MAKE_OPTS != "" ]] 
    then	
	MAKE_OPTS=$(echo $MAKE_OPTS | sed -e 's/ /,/g')
	make --file $SCRIPTS_PATH/Makefile CONFIG_FILE=$CONF CONFIG_SYS=${INSTALL_PATH}/config-system.txt MAKE_OPTS=$MAKE_OPTS make_torque_script 2>&1
    else
    	make --file $SCRIPTS_PATH/Makefile CONFIG_FILE=$CONF CONFIG_SYS=${INSTALL_PATH}/config-system.txt make_torque_script 2>&1
    fi
fi

